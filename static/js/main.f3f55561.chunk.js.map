{"version":3,"sources":["components/Todo.js","components/TodoForm.js","components/EditTodoForm.js","components/TodoWrapper.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","_ref","task","deleteTodo","editTodo","toggleComplete","React","createElement","className","concat","completed","onClick","id","FontAwesomeIcon","icon","faPenToSquare","faTrash","TodoForm","addTodo","_useState","useState","_useState2","_slicedToArray","value","setValue","onSubmit","e","preventDefault","type","onChange","target","placeholder","EditTodoForm","TodoWrapper","todos","setTodos","filter","todo","map","_objectSpread","isEditing","editTask","_toConsumableArray","uuidv4","key","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","HashRouter"],"mappings":"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","file":"static/js/main.f3f55561.chunk.js","sourcesContent":["import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPenToSquare } from '@fortawesome/free-solid-svg-icons'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\nexport const Todo = ({task, deleteTodo, editTodo, toggleComplete}) => {\n \n  return (\n    <div className=\"Todo\">\n        <p className={`${task.completed ? 'completed' : \"\"}`} onClick={() => toggleComplete(task.id)}>{task.task}</p>\n        <div>\n        <FontAwesomeIcon icon={faPenToSquare} onClick={() => editTodo(task.id)} />\n        <FontAwesomeIcon icon={faTrash} onClick={() => deleteTodo(task.id)} />\n        </div>\n    </div>\n  )\n}","import React, {useState} from 'react'\n\nexport const TodoForm = ({addTodo}) => {\n    const [value, setValue] = useState('');\n\n    const handleSubmit = (e) => {\n      // prevent default action\n        e.preventDefault();\n        if (value) {\n          // add todo\n          addTodo(value);\n          // clear form after submission\n          setValue('');\n        }\n      };\n  return (\n    <form onSubmit={handleSubmit} className=\"TodoForm\">\n    <input type=\"text\" value={value} onChange={(e) => setValue(e.target.value)} className=\"todo-input\" placeholder='What is the task today?' />\n    <button type=\"submit\" className='todo-btn'>Add Task</button>\n  </form>\n  )\n}","import React, {useState} from 'react'\n\nexport const EditTodoForm = ({editTodo, task}) => {\n    const [value, setValue] = useState(task.task);\n\n    const handleSubmit = (e) => {\n      // prevent default action\n        e.preventDefault();\n        // edit todo\n        editTodo(value, task.id);\n      };\n  return (\n    <form onSubmit={handleSubmit} className=\"TodoForm\">\n    <input type=\"text\" value={value} onChange={(e) => setValue(e.target.value)} className=\"todo-input\" placeholder='Update task' />\n    <button type=\"submit\" className='todo-btn'>Add Task</button>\n  </form>\n  )\n}","import React, { useState } from \"react\";\nimport { Todo } from \"./Todo\";\nimport { TodoForm } from \"./TodoForm\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { EditTodoForm } from \"./EditTodoForm\";\n\nexport const TodoWrapper = () => {\n  const [todos, setTodos] = useState([]);\n\n  const addTodo = (todo) => {\n    setTodos([\n      ...todos,\n      { id: uuidv4(), task: todo, completed: false, isEditing: false },\n    ]);\n  }\n\n  const deleteTodo = (id) => setTodos(todos.filter((todo) => todo.id !== id));\n\n  const toggleComplete = (id) => {\n    setTodos(\n      todos.map((todo) =>\n        todo.id === id ? { ...todo, completed: !todo.completed } : todo\n      )\n    );\n  }\n\n  const editTodo = (id) => {\n    setTodos(\n      todos.map((todo) =>\n        todo.id === id ? { ...todo, isEditing: !todo.isEditing } : todo\n      )\n    );\n  }\n\n  const editTask = (task, id) => {\n    setTodos(\n      todos.map((todo) =>\n        todo.id === id ? { ...todo, task, isEditing: !todo.isEditing } : todo\n      )\n    );\n  };\n\n  return (\n    <div className=\"TodoWrapper\">\n      <h1>Get Things Done !</h1>\n      <TodoForm addTodo={addTodo} />\n      {/* display todos */}\n      {todos.map((todo) =>\n        todo.isEditing ? (\n          <EditTodoForm editTodo={editTask} task={todo} />\n        ) : (\n          <Todo\n            key={todo.id}\n            task={todo}\n            deleteTodo={deleteTodo}\n            editTodo={editTodo}\n            toggleComplete={toggleComplete}\n          />\n        )\n      )}\n    </div>\n  );\n};","import React from 'react';\nimport './App.css';\nimport { TodoWrapper } from './components/TodoWrapper';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoWrapper />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {HashRouter} from 'react-router-dom';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <HashRouter>\n    <App />\n  </HashRouter>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}